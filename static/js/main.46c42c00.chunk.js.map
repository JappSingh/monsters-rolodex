{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAAAC,GAAK,OACvB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,kCAAMN,EAAMI,QAAQG,MAApB,WCmBSC,G,MAAW,SAAAR,GAAK,OAC3B,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCxBZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBAAOZ,UAAU,SAASa,KAAK,SACxBF,YAAaA,EACbG,SAAUF,MC+HJG,E,kDA1Gb,aAAe,IAAD,8BACZ,gBA6EFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA5E1C,EAAKC,MAAQ,CAEXd,SAAU,GACVW,YAAa,IANH,E,qDA6Bd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAqD3C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAKlD,OACE,sBAAK/B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAY,kBACrBC,aAAcgB,KAAKZ,iBAErB,cAAC,EAAD,CAAUR,SAAUqB,W,GApGVI,aCjBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.46c42c00.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n  <div className='card-container'>\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2> { props.monster.name } </h2>\r\n    <p> { props.monster.email } </p>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\n// Version 1: App doing the listing and CardList using props.children\r\n/*\r\nexport const CardList = props => {\r\n  return <div className='card-list'>{props.children}</div>;\r\n};\r\n*/\r\n\r\n// Version 2: CardList doing the list mapping, receiving the list as props from App\r\n// That list is \"State\" in App; When passed to CardList component, that state becomes a \"prop\"\r\n// 'monsters' list which is State in App == monsters list as Props in CardList\r\n/*\r\nexport const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <h1 key={monster.id}> { monster.name } </h1>\r\n    ))}\r\n  </div>\r\n);\r\n*/\r\n\r\n// Version 3: adds to ver 2: CardList uses Card component & passes it monster as props\r\nexport const CardList = props => (\r\n  <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n// Since cardList component needs SearchField state, we can't put that state into SearchBox component.\r\n// Need to \"Lift State Up\"!\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input className='search' type='search' \r\n         placeholder={placeholder} \r\n         onChange={handleChange}\r\n  />\r\n);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n// Component class has render() and life-cycle methods.\nclass App extends Component {\n  constructor() {\n    super(); // calls ctor on Component class, which gives access to this.state\n\n    this.state = {\n      //string: 'Hello!'\n      monsters: [], // initial state\n      searchField: ''\n    };\n\n    // set context of 'this' for handleChange() to App component\n    // Without this binding, 'this' in this.setState in handleChange() will be undefined!\n    // This is verbose way! \n    // Preferred way: Use ES6 'arrow' fns that auto set context of 'this' to whatever declared it!\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  /*\n  render() {\n    return (\n      <div className=\"App\">        \n          <p>{this.state.string}</p>\n          <button onClick={() => this.setState({string: 'Hello Japps!'})}>Change Text</button>\n      </div>\n    );\n  }\n  */\n\n  // Lifecycle Method\n  // When Component gets rendered initially, make an API call, convert response to JSON\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n  }\n\n  // Rather than App having responsibility to map the list; CardList component should do listing of cards.\n  /*\n  render() {\n    return (\n      <div className='App'>\n        <CardList>\n          {\n            this.state.monsters.map(monster => (<h1 key={monster.id}> { monster.name } </h1>))\n          }\n        </CardList>        \n      </div>\n    );\n  }\n  */\n\n  // Pass 'state' to CardList as props; if state changes, props change & component re-renders\n  /*\n  render() {\n    const { monsters, searchField } = this.state; // de-structuring syntax\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ); // case-insensitive search\n\n    return (\n      <div className='App'>\n        <input type='search' placeholder='search monsters' \n          onChange={e => this.setState({ searchField: e.target.value })} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    ); // CardList monsters={this.state.monsters}\n  }\n  */\n\n  // Our-defined method, for reusability\n  /*\n  handleChange(e) {\n    this.setState({ searchField: e.target.value });\n  }\n  */\n\n  // Rather than defining the fn as above, use ES6 arrow fn!\n  // It auto binds context of 'this' to whatever defined the fn!\n  // So define any class methods using this syntax!\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  // user enters search field => onChange => setState => render() => filteredMonsters\n  // So dynamically updates the filtered list display!\n  // Replace <input> with a functional component for reusability.\n  render() {\n    const { monsters, searchField } = this.state; // de-structuring syntax\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    // anonymous fn passed to handleChange prop\n    // 'this' keyword: points to context of \"class\" component\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <SearchBox placeholder='search monsters' \n          handleChange={this.onSearchChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }  \n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}